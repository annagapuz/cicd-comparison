def TAG_IT = 'No'

pipeline {
    agent any

//    tools {
//        jdk 'OpenJDK 11'
//        maven 'Maven 3.6.3'
//    }

    stages {
        stage('Initialization') {
            agent none
            steps {
                echo "SVN_URL ${env.SVN_URL}"
                echo "BRANCH_NAME ${env.BRANCH_NAME}"
                echo "BUILD_TAG ${env.BUILD_TAG}"

                sh 'printenv'
            }
        }

        stage('Build and Unit Test') {
            steps {
                echo 'No checkout required as it happens automatically with multibranch pipeline'
                withMaven(globalMavenSettingsConfig: '617fa46e-afa8-4e72-9382-152514fa4ebc', jdk: 'OpenJDK 11', maven: 'Maven 3.6.3') {
                    echo 'Run Maven CLEAN and VERIFY with Force Updates'
                    sh 'mvn -U clean verify'
                }
            }

            post {
                // If Maven was able to run the tests, even if some of the test
                // failed, record the test results and archive the jar file.
                success {
                    junit '**/target/surefire-reports/TEST-*.xml'
                }
            }
        }

//        stage('Static Analysis') {
//            steps {
//                withMaven(globalMavenSettingsConfig: '617fa46e-afa8-4e72-9382-152514fa4ebc', jdk: 'OpenJDK 11', maven: 'Maven 3.6.3') {
//                    echo 'Run Sonarqube analysis'
//                    sh 'mvn sonar:sonar -Dsonar.projectKey=movie-service -Dsonar.host.url=http://sonarqube:9000 -Dsonar.login=07b739a25d86dc8f9c07ecc68b9a28aa495933e4 -Dsonar.scm.disabled=true'
//                }
//            }
//        }

        stage('Upload Snapshot') {
            when {
                not {
                    branch 'tags/*'
                }
                beforeAgent true
            }
            steps {
                withMaven(globalMavenSettingsConfig: '617fa46e-afa8-4e72-9382-152514fa4ebc', jdk: 'OpenJDK 11', maven: 'Maven 3.6.3') {
                    script {
                        POM_SNAPSHOT_VERSION = sh script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout | tail -1', returnStdout: true
                    }
                    echo "Building Snapshot of version ${POM_SNAPSHOT_VERSION}"
                    sh 'mvn -Dmaven.test.skip=true -DaltDeploymentRepository=demoRepo::default::http://nexus:8081/repository/demo-snapshot deploy'
                }
            }
        }

        stage('Tag as a release?') {
            options {
                timeout(time: 15, unit: 'MINUTES')
            }
            when {
                not {
                    branch 'tags/*'
                }
                beforeAgent true
            }
            input {
                message 'Tag as a release?'
                ok 'Submit'
                parameters {
                    choice choices: ['Yes', 'No'], description: '', name: 'USER_ANSWER'
                }
            }
            agent none
            steps {
                echo "Your decision to tag as a release is: ${USER_ANSWER}"
                script {
                    TAG_IT = sh(script: "echo ${USER_ANSWER}", returnStdout: true).trim()
                }
            }
        }

        stage('Run Maven Release') {
            when {
                expression { TAG_IT == 'Yes' }
                not {
                    branch 'tags/*'
                }
                beforeAgent true
            }
            steps {
                withMaven(globalMavenSettingsConfig: '617fa46e-afa8-4e72-9382-152514fa4ebc', jdk: 'OpenJDK 11', maven: 'Maven 3.6.3') {
                    script {
                        POM_CURRENT_VERSION = sh(script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout | tail -1', returnStdout: true).trim()
                    }
                    echo "Current version in POM is ${POM_CURRENT_VERSION}"
                    script {
                        POM_RELEASE_VERSION = POM_CURRENT_VERSION.replaceAll('-SNAPSHOT', '')
                    }
                    echo "Release version from POM will be ${POM_RELEASE_VERSION}"

                    sh 'mvn release:prepare -B'
                    sh 'cat ./release.properties'
                    sh 'mvn release:perform -B -Dgoals=deploy -Darguments="-Dmaven.test.skip=true -DaltDeploymentRepository=demoRepo::default::http://nexus:8081/repository/demo-release"'
                }
            }
        }

        stage('Determine if Branch') {
            when {
                branch 'branches/*'
                beforeAgent true
            }
            agent none
            steps {
                // BRANCH_NAME branches/add_feature
                echo "Is Branch == ${env.BRANCH_NAME}"

            }
        }

        stage('Determine if Tag') {
            when {
                branch 'tags/*'
                beforeAgent true
            }
            agent none
            steps {
                // BRANCH_NAME branches/add_feature
                echo "Is Tag == ${env.BRANCH_NAME}"
            }
        }

    }
}
